; Heroku configuration
; [uwsgi]
; http-socket = :$(PORT)
; master = true
; die-on-term = true
; module = app:app
; memory-report = true

; DigitalOcean configuration
[uwsgi]
; Location of our appp sources
base = /var/www/html/items-rest
; Location of the run file
app = run
; Module inside the file to run
module = %(app)
; home of the uWSGI process
; % is a previously defined variable
home = %(base)/env
; root folder of python
pythonpath = %(base)
; Allows communication between uWSGI and Nginx
socket = %(base)/socket.sock
; 777 means any user in the system can access the socket file
chmod-socket = 777
; Number of processes that we want. 8 might be pretty high
processes = 8
; Each process will have 8 threads.
; You can play around with processes and threads to see performance
threads = 8
; If one of the threads gets blocked or has an error then in 15 seconds 
; this will destroy the thread and create another one.
; The uWSGI-emperor process is responsible for this
harakiri = 15
; This is the variable app that is imported in the run.py file. uWSGI will get the 
; module variable and will search the callable variable inside the module to run
; the Flask app. 
callable = app
; Place to log the python app output
; %n means uWSGI - so output to uWSGI.log
logto = /var/www/html/items-rest/log/%n.log 

